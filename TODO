
Libraries

- geometry

- graphs
  - graph property record to configure the graph

- charts

- text
  - formulas (fractions, sub/superscript etc)
  - text on curve (actually can be a general combinator)
  - svg
    - kerning
      - handle char ranges in kern tags
    - left/right/center align
  - parse ttf?
    - use MacOS api functions to do it?
    - might be more work than it's worth, the Liberation open source
      fonts can be converted to svg

- fractals, procedural generation stuff
  - make use of bindCurve (or similar) to make it easier to do things like
    fractals

Change style parameterization
  - Right now the style just depends on the relative and pixel distances. It
    would be nice if you could parameterize on more stuff easier. Example use
    case: use the derivative of the curve to determine the style.
  - Could I make curves (or images) into a functor of some kind. Question: what
    would be the parameter type? How does it play with pixel-based features.
  - A first step might be to move the line style into the curve. That should be
    possible. Turns out to be a little bit tricky. I should probably write down
    some examples of what I want to be able to do and make sure this change
    will make that possible...

Textures
  - actual textures (reading png files and use as texture)
    - could go crazy with texture filtering and mipmapping

Examples
  - Front page

Look at the diagrams package for inspiration
  - backend for the diagrams package?

Advanced font rendering techniques
  - hinting: tweak shapes to make integral pixel coords fall inside
    (a narrow rectangle will be shifted to contain pixel coords)
  - subpixel rendering (take advantage of RGB display layout)
  - not sure how to do hinting, but subpixel rendering might be possible

BUGS

autoFit behaves strangely if entire image is frozen

autoFit doesn't work well when there are big frozen features
  - example: frozen text 10 units high and unit circle

